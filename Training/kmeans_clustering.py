# -*- coding: utf-8 -*-
"""KMeans_Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iHrU4ngNCRLLH3fRl617v1mBdW9pKuYW

**KMeans clustering for finding out SQL injection anamolies from dump of server log**
"""

from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)

import pandas as pd
import matplotlib.pyplot as plt
import urllib.parse

df = pd.read_excel('/content/gdrive/MyDrive/Datasets/Security/server_log.xlsx')
df.head()

df.shape

df = df[:20000]
df.shape

# Removing the timestamp from request
import re
df['requests'] = df['requests'].apply(lambda ele: re.sub('^INFO[\s\S]*(])', '', ele))

# Removing the special white space characters
df['requests'] = df['requests'].apply(lambda ele: ele.replace('%20', ' '))

# Removing the response string HTTP/1.1" 200
df['requests'] = df['requests'].apply(lambda ele: ele.replace('HTTP/1.1" 200', ''))

# Converting the strings into vectorizer
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import CountVectorizer
vectorizer = CountVectorizer(stop_words=stopwords.words('english'))
queries = vectorizer.fit_transform(df['requests'].values.astype('U')).toarray()

words = []
for key in vectorizer.vocabulary_:
    words.append(key)

new_df = pd.DataFrame(queries)
new_df = new_df.T
new_df.index = words
new_df = new_df.T
new_df.head()

from sklearn.cluster import KMeans
km = KMeans(n_clusters=3)
y_preds = km.fit_predict(new_df)

plt.scatter(range(20000), y_preds)
plt.show()

clustered_df = new_df
clustered_df['cluster_id'] = y_preds
clustered_df.head()

df['cluster_id'] = y_preds
df.head()

file_name = '/content/gdrive/MyDrive/Models/1-cluster.xlsx'
df[df['cluster_id'] == 1].to_excel(file_name)

file_name = '/content/gdrive/MyDrive/Models/2-cluster.xlsx'
df[df['cluster_id'] == 2].to_excel(file_name)

file_name = '/content/gdrive/MyDrive/Models/0-cluster.xlsx'
df[df['cluster_id'] == 0].to_excel(file_name)

# Loading the SQL Injection Model
# Fetching the model
import pickle
import os
save_location = '/content/gdrive/MyDrive/Models/Security Models'
model_name = 'sql_inject_model.sav'
fetch_model = pickle.load(open(os.path.join(save_location, model_name), 'rb'))
model = fetch_model['model']
vectorizer = fetch_model['vectorizer']

import numpy as np
test_corpus = df[df['cluster_id'] == 0].requests.values
test_query = vectorizer.transform(test_corpus).toarray()
test_prediction = model.predict(test_query)
len(test_prediction) - sum(test_prediction == 1)

test_corpus = df[df['cluster_id'] == 1].requests.values
test_query = vectorizer.transform(test_corpus).toarray()
test_prediction = model.predict(test_query)
len(test_prediction) - sum(test_prediction == 1)

test_corpus = df[df['cluster_id'] == 2].requests.values
test_query = vectorizer.transform(test_corpus).toarray()
test_prediction = model.predict(test_query)
len(test_prediction) - sum(test_prediction == 1)

