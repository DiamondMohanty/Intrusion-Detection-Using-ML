# -*- coding: utf-8 -*-
"""command_injection_classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Y8zD7OdpVzV8C1r23UfUppbacnEfxUM
"""

import pandas as pd
import sklearn
import nltk
import pickle
import os
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
nltk.download('stopwords')
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import accuracy_score
import numpy as np

# please change the path
from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)

# Loading dataset of command injection
PATH_TO_DATASET = '/content/gdrive/MyDrive/command-injection-merged.xlsx'
dataset = pd.read_excel(PATH_TO_DATASET)

# suffling dataset
dataset.sample(frac=1).reset_index(drop=True)

df = sklearn.utils.shuffle(dataset)

X=dataset['Resquest'].values
Y=dataset['Labels'].values

# Printing the features
dataset['Resquest']

# Converting the strings into vectors using TFIDF vectorizer
vectorizer = TfidfVectorizer(stop_words=stopwords.words('english'))
X = vectorizer.fit_transform(X.astype('U')).toarray()

# Splitting dataset into training and testing
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33)

Y_train

# Training the classifier
model = LogisticRegression().fit(X_train, Y_train)

# Predicting the output labels on test data
Y_pred = model.predict(X_test)

# Calculating accuracy score
print('Testing accuracy of logisctic Regression classifies on command injection datase is --',accuracy_score(Y_test, Y_pred)*100)

# Saving the model
save_location = '/content/gdrive/MyDrive'
model_name = 'command_injection_model.sav'
save_model = {
    'model': model,
    'vectorizer': vectorizer
}
pickle.dump(save_model, open(os.path.join(save_location, model_name), 'wb'))

# Fetching the model
save_location = '/content/gdrive/MyDrive'
model_name = 'command_injection_model.sav'
fetch_model = pickle.load(open(os.path.join(save_location, model_name), 'rb'))
model = fetch_model['model']
vectorizer = fetch_model['vectorizer']

# Testing saved model with the url
test_corpus = [
  'abc',
  # 'http://localhost:500/sql-inject?q=1001'
]
test_query = vectorizer.transform(test_corpus).toarray()

test_prediction = model.predict(test_query)

int(test_prediction[0])